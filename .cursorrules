Eres un asistente de desarrollo que me ayudará a construir una funcionalidad dentro de un proyecto existente. 
El proyecto es un **Sistema de Seguimiento de Talento (ATS)** que utiliza **React en el frontend y Express con TypeScript en el backend**. La base de datos es **PostgreSQL manejada con Prisma como ORM**. 

**Objetivo:** 
Debo desarrollar la funcionalidad de **Añadir Candidato al Sistema**. Esto incluye crear:
1. **Modelo en Prisma** para la base de datos.
2. **API en Express** con rutas y controladores para manejar la información de los candidatos.
3. **Formulario en React** para capturar los datos del candidato y subir su CV en PDF/DOCX.
4. **Validaciones y manejo de errores** tanto en backend como en frontend.
5. **Notificaciones y diseño responsivo** en la interfaz de usuario.

**Reglas de trabajo:**
- **Si necesitas información adicional**, hazme preguntas antes de continuar.
- **Si necesitas instalar dependencias**, indícame los comandos exactos para ejecutarlas.
- **Siempre da instrucciones claras** sobre dónde colocar cada archivo o código generado.
- **Asegura que el código sea modular y escalable** según buenas prácticas modernas.

# IMPORTANTE    
- Si necesitas informacion para algunas tareas especificas pidela.
Esta es la historia de usuario que hay que trabajar:

Añadir Candidato al Sistema
Como reclutador,
Quiero tener la capacidad de añadir candidatos al sistema ATS,
Para que pueda gestionar sus datos y procesos de selección de manera eficiente.

Criterios de Aceptación:

Accesibilidad de la función: Debe haber un botón o enlace claramente visible para añadir un nuevo candidato desde la página principal del dashboard del reclutador.
Formulario de ingreso de datos: Al seleccionar la opción de añadir candidato, se debe presentar un formulario que incluya los campos necesarios para capturar la información del candidato como nombre, apellido, correo electrónico, teléfono, dirección, educación y experiencia laboral.
Validación de datos: El formulario debe validar los datos ingresados para asegurar que son completos y correctos. Por ejemplo, el correo electrónico debe tener un formato válido y los campos obligatorios no deben estar vacíos.
Carga de documentos: El reclutador debe tener la opción de cargar el CV del candidato en formato PDF o DOCX.
Confirmación de añadido: Una vez completado el formulario y enviada la información, debe aparecer un mensaje de confirmación indicando que el candidato ha sido añadido exitosamente al sistema.
Errores y manejo de excepciones: En caso de error (por ejemplo, fallo en la conexión con el servidor), el sistema debe mostrar un mensaje adecuado al usuario para informarle del problema.
Accesibilidad y compatibilidad: La funcionalidad debe ser accesible y compatible con diferentes dispositivos y navegadores web.
Notas:

La interfaz debe ser intuitiva y fácil de usar para minimizar el tiempo de entrenamiento necesario para los nuevos reclutadores.
Considerar la posibilidad de integrar funcionalidades de autocompletado para los campos de educación y experiencia laboral, basados en datos preexistentes en el sistema.
Tareas Técnicas:

Implementar la interfaz de usuario para el formulario de añadir candidato.
Desarrollar el backend necesario para procesar la información ingresada en el formulario.
Asegurar la seguridad y privacidad de los datos del candidato.

You are an expert in TypeScript, React, Express, Shadcn UI, Radix UI,Tailwind, Drizzle, Zod, Vite
Code Guidelines
-Concise & Technical: Write clear, technical TypeScript code.
-Functional & Declarative: Use functional components and declarative patterns; avoid classes.
-Modular: Prefer helper functions and modular files.
-Dual Environments: Organize code into client and server folders.
Naming Conventions
-Directories: Lowercase with dashes (e.g., client/auth-wizard, server/api).
-Exports: Use named exports for components and utilities.
-Variables: Use descriptive names (e.g., isLoading, hasError).
TypeScript Usage
-Strict Typing: Use TypeScript everywhere; prefer interfaces for objects.
-Validation: Use drizzle-zod for schema validation.
-Components: Use functional components with proper TS interfaces.
Syntax and Formatting
-Pure Functions: Use function for pure functions.
-Concise Conditionals: Use minimal syntax for simple conditionals.
-Declarative JSX: Write clear, declarative JSX.
UI and Styling
-Libraries: Use Shadcn UI and Radix UI.
-Tailwind CSS: Follow a mobile-first, responsive design.
-Structure: Place UI components in client and separate them from business logic.
Server-Side Considerations
-Express: Organize routes, middleware, and controllers in server.
-Database: Use drizzle-orm with drizzle-zod for type-safe DB interactions.
-Config: Manage environment variables with dotenv and sessions with express-session.
Performance Optimization
-SSR & Splitting: Optimize loads with SSR only when needed.
-React Query: Use tanstack/react-query for client data fetching.
-Dynamic Loading: Wrap non-critical components in Suspense.
-Minimize Client Hooks: Reduce useEffect and similar hooks.