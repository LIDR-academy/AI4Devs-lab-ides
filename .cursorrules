# Reglas y Prácticas de Desarrollo para el Proyecto ATS

## Arquitectura
- Implementar arquitectura de tres capas:
  - Frontend (React + TypeScript)
  - Backend (Node.js + Express)
  - Base de Datos (PostgreSQL en contenedor Docker Compose)
- Seguir los principios de Domain-Driven Design (DDD)
- Implementar Test-Driven Development (TDD)

## Estándares de Código

### General
- Usar TypeScript en todo el proyecto
- Seguir principios SOLID
- Implementar Clean Architecture
- Documentar todas las funciones y clases
- Mantener un máximo de 80-100 caracteres por línea
- Usar nombres descriptivos en inglés para variables, funciones y clases

### Frontend
- Componentes funcionales con React Hooks
- Implementar Atomic Design para componentes
- Usar CSS-in-JS (styled-components)
- Testing con Jest y React Testing Library
- Estado global con Redux Toolkit

### Backend
- Arquitectura hexagonal
- Inyección de dependencias
- Testing unitario con Jest
- Testing de integración con Supertest
- Documentación API con Swagger/OpenAPI

### Base de Datos
- Usar TypeORM como ORM
- Implementar migraciones para cambios en DB
- Seguir convenciones de nombrado snake_case
- Documentar todas las tablas y relaciones
- Ejecutar PostgreSQL en Docker Compose

## Control de Versiones
- Usar Git Flow como estrategia de branching
- Convención de commits: 
  feat: nueva funcionalidad
  fix: corrección de bugs
  docs: documentación
  style: cambios de formato
  refactor: refactorización de código
  test: añadir o modificar tests
  chore: tareas de mantenimiento

## Testing
- Cobertura mínima de tests: 80%
- Tests unitarios obligatorios
- Tests de integración para APIs
- Tests e2e para flujos críticos

## Seguridad
- Implementar autenticación JWT
- Validación de inputs
- Sanitización de datos
- Encriptación de datos sensibles
- Logging de acciones críticas

## CI/CD
- Pipeline de integración continua
- Análisis de código estático
- Revisión de dependencias
- Despliegue automatizado

## Monitoreo
- Implementar logging estructurado
- Monitoreo de performance
- Tracking de errores
- Métricas de aplicación

## Documentación
- README actualizado
- Documentación de API
- Diagramas de arquitectura
- Guía de contribución
- Documentación de procesos de negocio

## Entorno de Desarrollo
- Sistema Operativo: Windows

## Rol de Desarrollador Fullstack Experimentado

- Experiencia en el desarrollo de aplicaciones web completas utilizando React para el frontend y Node.js con Express para el backend.
- Conocimiento profundo de TypeScript y su aplicación en proyectos de gran escala.
- Capacidad para diseñar e implementar arquitecturas de software siguiendo principios SOLID y Clean Architecture.
- Experiencia en la gestión de bases de datos PostgreSQL, incluyendo la creación de migraciones y el uso de Docker Compose.
- Habilidad para implementar pruebas unitarias y de integración utilizando Jest y Supertest.
- Experiencia en el uso de herramientas de control de versiones como Git, siguiendo estrategias de branching como Git Flow.
- Capacidad para documentar código y procesos de manera clara y concisa.
- Experiencia en la implementación de CI/CD y en el monitoreo de aplicaciones en producción.
- Conocimiento en la implementación de medidas de seguridad como autenticación JWT y encriptación de datos sensibles.

# Reglas para cambiar al directorio adecuado antes de ejecutar comandos

# Si estamos trabajando en el backend, cambiar al directorio 'backend'
if context == 'backend':
    cd backend

# Si estamos trabajando en el frontend, cambiar al directorio 'frontend'
if context == 'frontend':
    cd frontend