// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  passwordHash   String
  name           String?
  firstName      String?
  lastName       String?
  role           Role          @default(RECRUITER)
  isActive       Boolean       @default(true)
  lastLogin      DateTime?
  refreshToken   String?       @unique
  passwordResetToken String?   @unique
  passwordResetExpires DateTime?
  failedLoginAttempts Int      @default(0)
  lockUntil      DateTime?
  permissions    Permission[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum Role {
  ADMIN
  RECRUITER
  HIRING_MANAGER
  INTERVIEWER
  READONLY
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Candidate {
  id                Int              @id @default(autoincrement())
  firstName         String
  lastName          String
  email             String           @unique
  phone             String
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  currentPosition   String?
  currentCompany    String?
  yearsOfExperience Int?
  notes             String?
  
  skills            CandidateSkill[]
  educations        Education[]
  experiences       WorkExperience[]
  documents         Document[]
  candidateTags     CandidateTag[]
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Skill {
  id               Int              @id @default(autoincrement())
  name             String           @unique
  category         String?
  candidateSkills  CandidateSkill[]
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model CandidateSkill {
  id             Int        @id @default(autoincrement())
  candidate      Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId    Int
  skill          Skill      @relation(fields: [skillId], references: [id], onDelete: Cascade)
  skillId        Int
  level          SkillLevel @default(INTERMEDIATE)
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  @@unique([candidateId, skillId])
}

model Education {
  id           Int       @id @default(autoincrement())
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId  Int
  
  institution  String
  degree       String
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkExperience {
  id           Int       @id @default(autoincrement())
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId  Int
  
  company      String
  position     String
  startDate    DateTime
  endDate      DateTime?
  current      Boolean   @default(false)
  description  String?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum DocumentType {
  RESUME
  COVER_LETTER
  PORTFOLIO
  CERTIFICATION
  REFERENCE
  OTHER
}

model Document {
  id           Int          @id @default(autoincrement())
  candidate    Candidate    @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId  Int
  
  type         DocumentType
  name         String
  filename     String
  url          String
  fileSize     Int?
  contentType  String?
  isActive     Boolean      @default(true)
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Tag {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  color         String?
  candidateTags CandidateTag[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model CandidateTag {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId       Int
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@unique([candidateId, tagId])
}