// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(CANDIDATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  CANDIDATE
}

model Candidate {
  id              Int                 @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String              @unique
  phone           String
  address         String
  linkedinProfile String?
  desiredSalary   String?
  isLinkedinCv    Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?
  education       Education[]
  workExperience  WorkExperience[]
  skills          Skill[]
  languages       Language[]
  documents       CandidateDocument[]
}

model Education {
  id           Int       @id @default(autoincrement())
  candidate    Candidate @relation(fields: [candidateId], references: [id])
  candidateId  Int
  institution  String
  degree       String
  startDate    DateTime
  endDate      DateTime?
  summary      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  company     String
  position    String
  startDate   DateTime
  endDate     DateTime?
  summary     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Skill {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([candidateId, name])
}

model Language {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  name        String
  level       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([candidateId, name])
}

model CandidateDocument {
  id          Int       @id @default(autoincrement())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  fileName    String
  fileType    String
  fileContent Bytes
  uploadedAt  DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}