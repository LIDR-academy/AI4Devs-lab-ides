generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo principal de Candidato
model Candidate {
  id            Int            @id @default(autoincrement())
  firstName     String         @db.VarChar(100)
  lastName      String         @db.VarChar(100)
  email         String         @unique @db.VarChar(255)
  phone         String         @db.VarChar(20)
  address       String         @db.VarChar(255)
  resumeUrl     String?        @db.VarChar(255)
  status        CandidateStatus @default(ACTIVE)
  notes         String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  education     Education[]    // Relación uno a muchos con Education
  experience    Experience[]   // Relación uno a muchos con Experience
}

// Modelo para la información educativa
model Education {
  id          Int        @id @default(autoincrement())
  institution String     @db.VarChar(255)
  degree      String     @db.VarChar(255)
  fieldOfStudy String    @db.VarChar(255)
  startDate   DateTime
  endDate     DateTime?
  current     Boolean    @default(false)
  candidate   Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
}

// Modelo para la experiencia laboral
model Experience {
  id          Int        @id @default(autoincrement())
  company     String     @db.VarChar(255)
  position    String     @db.VarChar(255)
  description String     @db.Text
  startDate   DateTime
  endDate     DateTime?
  current     Boolean    @default(false)
  candidate   Candidate  @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId Int
}

// Enum para el estado del candidato
enum CandidateStatus {
  ACTIVE
  INACTIVE
  INTERVIEWING
  HIRED
  REJECTED
} 