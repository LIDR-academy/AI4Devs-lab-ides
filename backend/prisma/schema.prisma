// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Candidate {
  id              Int              @id @default(autoincrement())
  firstName       String    
  lastName        String    
  email           String           @unique
  phone           String           // Obligatorio
  address         String?   
  cvUrl           String           // Obligatorio
  cvFileName      String?   
  
  // Relaciones con los nuevos modelos
  education       Education[]
  workExperience  WorkExperience[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Education {
  id            Int       @id @default(autoincrement())
  institution   String    // Nombre de la institución educativa
  degree        String    // Título obtenido
  fieldOfStudy  String    // Campo de estudio
  startDate     DateTime  // Fecha de inicio
  endDate       DateTime? // Fecha de finalización (opcional para estudios en curso)
  description   String?   @db.Text // Descripción adicional
  
  // Relación con el candidato
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([candidateId])
}

model WorkExperience {
  id            Int       @id @default(autoincrement())
  company       String    // Nombre de la empresa
  position      String    // Cargo o posición
  location      String?   // Ubicación
  startDate     DateTime  // Fecha de inicio
  endDate       DateTime? // Fecha de finalización (opcional para trabajos actuales)
  description   String?   @db.Text // Descripción de responsabilidades y logros
  
  // Relación con el candidato
  candidateId   Int
  candidate     Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([candidateId])
}

// Modelos para autocompletado

model Institution {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  type      String?   // Universidad, Instituto, etc.
  location  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  industry  String?
  location  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Degree {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  level     String?   // Grado, Máster, Doctorado, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FieldOfStudy {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  category  String?   // Ingeniería, Ciencias, Humanidades, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model JobPosition {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  category  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}